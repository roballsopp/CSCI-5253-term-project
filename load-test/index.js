const axios = require('axios');

const filesToProcess = [
	'1607364220997',
	'1607364654547',
	'1607364748023',
	'1607364817865',
	'1607364874442',
	'1607364912363',
	'1607364942345',
	'1607365034351',
	'1607365149361',
	'1607365327555',
	'1607365708980',
	'1607365709899',
	'1607366009119',
	'1607366009159',
	'1607366078645',
	'1607366078747',
	'1607366078791',
	'1607366078894',
	'1607366078992',
	'1607366079096',
	'1607366079191',
	'1607366079299',
	'1607366079393',
	'1607366079494',
	'1607366079600',
	'1607366079695',
	'1607366079800',
	'1607366079912',
	'1607366079993',
	'1607366080093',
	'1607366080194',
	'1607366080303',
	'1607366080397',
	'1607366080492',
	'1607366269346',
	'1607366269415',
	'1607366269498',
	'1607366269596',
	'1607366269796',
	'1607366269810',
	'1607366269998',
	'1607366270001',
	'1607366270107',
	'1607366270198',
	'1607366270302',
	'1607366270402',
	'1607366270498',
	'1607366270600',
	'1607366270699',
	'1607366270801',
	'1607366270903',
	'1607366271022',
	'1607366271109',
	'1607366271200',
	'1607366271303',
	'1607366271408',
	'1607366271504',
	'1607366271609',
	'1607366271704',
	'1607366271802',
	'1607366271893',
	'1607366271998',
	'1607366272097',
	'1607366272202',
	'1607366272305',
	'1607366272400',
	'1607366272503',
	'1607366272606',
	'1607366272702',
	'1607366272809',
	'1607366272898',
	'1607366273015',
	'1607366273103',
	'1607366273219',
	'1607366273302',
	'1607366273404',
	'1607366273502',
	'1607366273603',
	'1607366273703',
	'1607366273799',
	'1607366273899',
	'1607366273996',
	'1607366274103',
	'1607366274234',
	'1607366274299',
	'1607366274433',
	'1607366274539',
	'1607366274614',
	'1607366274737',
	'1607366274806',
	'1607366274898',
	'1607366274999',
	'1607366275096',
	'1607366275197',
	'1607366275306',
	'1607366275418',
	'1607366275534',
	'1607366275642',
	'1607366275745',
	'1607366275844',
	'1607366275950',
	'1607366276053',
	'1607366276157',
	'1607366276248',
	'1607366276339',
	'1607366276449',
	'1607366276551',
	'1607366276649',
	'1607366276736',
	'1607366276847',
	'1607366276949',
	'1607366277054',
	'1607366277164',
	'1607366277237',
	'1607366277351',
	'1607366277446',
	'1607366277552',
	'1607366277639',
	'1607366277747',
	'1607366277846',
	'1607366277947',
	'1607366278041',
	'1607366278142',
	'1607366278246',
	'1607366278343',
	'1607366278453',
	'1607366278550',
	'1607366278644',
	'1607366278745',
	'1607366278848',
	'1607366278943',
	'1607366279044',
	'1607366279153',
	'1607366279243',
	'1607366279352',
	'1607366279451',
	'1607366279617',
	'1607366279646',
	'1607366279738',
	'1607366279856',
	'1607366279903',
	'1607366280002',
	'1607366280107',
	'1607366280201',
	'1607366280302',
	'1607366280398',
	'1607366280494',
	'1607366280601',
	'1607366280698',
	'1607366280848',
	'1607366280900',
	'1607366281002',
	'1607366281102',
	'1607366281202',
	'1607366281309',
	'1607366281401',
	'1607366281502',
	'1607366281604',
	'1607366281757',
	'1607366281804',
	'1607366281903',
	'1607366282016',
	'1607366282106',
	'1607366282203',
	'1607366282315',
	'1607366282406',
	'1607366282498',
	'1607366282600',
	'1607366282768',
	'1607366282803',
	'1607366282950',
	'1607366283046',
	'1607366283144',
	'1607366283251',
	'1607366283344',
	'1607366283449',
	'1607366283551',
	'1607366283655',
	'1607366283757',
	'1607366283844',
	'1607366284004',
	'1607366284093',
	'1607366284155',
	'1607366284229',
	'1607366284306',
	'1607366284405',
	'1607366284506',
	'1607366284644',
	'1607366284744',
	'1607366284800',
	'1607366284902',
	'1607366285000',
	'1607366285102',
	'1607366285201',
	'1607366285302',
	'1607366285412',
	'1607366285501',
	'1607366285604',
	'1607366285763',
	'1607366285815',
	'1607366285991',
	'1607366286001',
	'1607366286143',
	'1607366286204',
	'1607366286307',
	'1607366286396',
	'1607366286505',
	'1607366286604',
	'1607366286707',
	'1607366286805',
	'1607366286895',
	'1607366287003',
	'1607366287099',
	'1607366287242',
	'1607366287353',
	'1607366287451',
	'1607366287543',
	'1607366287651',
	'1607366287762',
	'1607366287843',
	'1607366287941',
	'1607366288047',
	'1607366288148',
	'1607366288251',
	'1607366288355',
	'1607366288451',
	'1607366288552',
	'1607366288642',
	'1607366288739',
	'1607366288841',
	'1607366288942',
	'1607366289046',
	'1607366289151',
	'1607366289244',
	'1607371081545',
];

// const filesToProcess = ['1607364220997'];

async function initProcessing(filename) {
	try {
		const { data } = await axios.post('http://35.190.15.32/graphql', {
			operationName: 'beginProcessingJob',
			query: `
			mutation beginProcessingJob($filename: String!) {
				beginProcessingJob(filename: $filename) {
					job {
						id
						state
					}
				}
			}
		`,
			variables: { filename },
		});

		return data.data.beginProcessingJob;
	} catch (e) {
		if (e.response) throw e.response.data.errors[0];
		throw e;
	}
}

function pollJob(jobId, interval = 1000, timeout = 20000) {
	return new Promise((resolve, reject) => {
		const intervalId = setInterval(async () => {
			try {
				const { data } = await axios.post('http://35.190.15.32/graphql', {
					operationName: 'getProcessingJob',
					query: `
						query getProcessingJob($jobId: String!) {
							processingJob(jobId: $jobId) {
								id
								state
							}
						}
					`,
					variables: { jobId },
				})
				const { processingJob } = data.data;

				if (processingJob.state === 'success') {
					clearInterval(intervalId);
					resolve(processingJob);
				} else if (processingJob.state === 'error') {
					clearInterval(intervalId);
					reject(new Error('Job failed'));
				}
			} catch (err) {
				clearInterval(intervalId);
				if (!err.response) reject(err);
				else if (err.response.data.errors) reject(err.response.data.errors[0]);
				else reject(err.response.data);
			}
		}, interval);

		setTimeout(() => {
			clearInterval(intervalId);
			reject(new Error('Poll timeout exceeded.'));
		}, timeout);
	});
}

async function sleep(ms) {
	return new Promise((resolve) => {
		setTimeout(() => resolve(), ms);
	});
}

async function runTest() {
	const start = new Date();
	const promises = [];

	console.log('Sending requests');

	for (let i = 0; i < filesToProcess.length; i++) {
		await sleep(500);
		const req = initProcessing(filesToProcess[i])
			.then(({ job }) => {
				return pollJob(job.id);
			})
			.catch((e) => {
				console.error(e);
				throw e;
			});

		promises.push(req);
	}

	console.log('Send complete');

	Promise.allSettled(promises)
		.then((results) => {
			console.log("Num Jobs:", filesToProcess.length);
			console.log("Time Taken:", (new Date() - start) / 1000, 'seconds');
			const failed = results.some(r => r.status === 'rejected');
			if (failed) throw new Error('Request failure');
		})
		.catch((e) => {
			console.error(e);
		});
}

runTest();


